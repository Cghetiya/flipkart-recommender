{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "330d7d24-8765-4ad8-bcb8-d40945386574",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Initial shape: (1639, 11)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Brand</th>\n",
       "      <th>Title</th>\n",
       "      <th>Product Type</th>\n",
       "      <th>Who</th>\n",
       "      <th>Price</th>\n",
       "      <th>MRP</th>\n",
       "      <th>Savings</th>\n",
       "      <th>Discount %</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Total Ratings Given</th>\n",
       "      <th>Total Reviews Given</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NIKE</td>\n",
       "      <td>NIKE Nike Revolution 4 Men'...</td>\n",
       "      <td>shoes</td>\n",
       "      <td>men</td>\n",
       "      <td>2216</td>\n",
       "      <td>3693.33</td>\n",
       "      <td>1477</td>\n",
       "      <td>40.0</td>\n",
       "      <td>4.2</td>\n",
       "      <td>54006</td>\n",
       "      <td>7049</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Layasa</td>\n",
       "      <td>Layasa sports shoes for men...</td>\n",
       "      <td>shoes</td>\n",
       "      <td>men</td>\n",
       "      <td>379</td>\n",
       "      <td>997.37</td>\n",
       "      <td>618</td>\n",
       "      <td>62.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>13792</td>\n",
       "      <td>1677</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>YONEX</td>\n",
       "      <td>YONEX Tokyo 2 Badminton Sho...</td>\n",
       "      <td>shoes</td>\n",
       "      <td>men</td>\n",
       "      <td>1919</td>\n",
       "      <td>2998.44</td>\n",
       "      <td>1079</td>\n",
       "      <td>36.0</td>\n",
       "      <td>4.3</td>\n",
       "      <td>1298</td>\n",
       "      <td>172</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ADIDAS</td>\n",
       "      <td>ADIDAS Clear Factor M Runni...</td>\n",
       "      <td>shoes</td>\n",
       "      <td>men</td>\n",
       "      <td>1499</td>\n",
       "      <td>2498.33</td>\n",
       "      <td>999</td>\n",
       "      <td>40.0</td>\n",
       "      <td>4.2</td>\n",
       "      <td>3904</td>\n",
       "      <td>578</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>PUMA</td>\n",
       "      <td>PUMA Space Runner Running S...</td>\n",
       "      <td>shoes</td>\n",
       "      <td>men</td>\n",
       "      <td>2050</td>\n",
       "      <td>3474.58</td>\n",
       "      <td>1424</td>\n",
       "      <td>41.0</td>\n",
       "      <td>4.2</td>\n",
       "      <td>194</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Brand                            Title Product Type  Who  Price      MRP  \\\n",
       "0    NIKE   NIKE Nike Revolution 4 Men'...        shoes  men   2216  3693.33   \n",
       "1  Layasa   Layasa sports shoes for men...        shoes  men    379   997.37   \n",
       "2   YONEX   YONEX Tokyo 2 Badminton Sho...        shoes  men   1919  2998.44   \n",
       "3  ADIDAS   ADIDAS Clear Factor M Runni...        shoes  men   1499  2498.33   \n",
       "4    PUMA   PUMA Space Runner Running S...        shoes  men   2050  3474.58   \n",
       "\n",
       "   Savings  Discount %  Rating  Total Ratings Given  Total Reviews Given  \n",
       "0     1477        40.0     4.2                54006                 7049  \n",
       "1      618        62.0     4.0                13792                 1677  \n",
       "2     1079        36.0     4.3                 1298                  172  \n",
       "3      999        40.0     4.2                 3904                  578  \n",
       "4     1424        41.0     4.2                  194                   36  "
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# Load original data\n",
    "df = pd.read_csv('FinalFlipkartData.csv')\n",
    "\n",
    "print(\"Initial shape:\", df.shape)\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5a7c755c-faba-4d1c-a837-41d4818ca2ab",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "After dropping duplicates: (1303, 11)\n",
      "After filtering by ratings: (1260, 11)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Brand</th>\n",
       "      <th>Title</th>\n",
       "      <th>Product Type</th>\n",
       "      <th>Who</th>\n",
       "      <th>Price</th>\n",
       "      <th>MRP</th>\n",
       "      <th>Savings</th>\n",
       "      <th>Discount %</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Total Ratings Given</th>\n",
       "      <th>Total Reviews Given</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>NIKE</td>\n",
       "      <td>NIKE Nike Revolution 4 Men'...</td>\n",
       "      <td>shoes</td>\n",
       "      <td>men</td>\n",
       "      <td>2216</td>\n",
       "      <td>3693.33</td>\n",
       "      <td>1477</td>\n",
       "      <td>40.0</td>\n",
       "      <td>4.2</td>\n",
       "      <td>54006</td>\n",
       "      <td>7049</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Layasa</td>\n",
       "      <td>Layasa sports shoes for men...</td>\n",
       "      <td>shoes</td>\n",
       "      <td>men</td>\n",
       "      <td>379</td>\n",
       "      <td>997.37</td>\n",
       "      <td>618</td>\n",
       "      <td>62.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>13792</td>\n",
       "      <td>1677</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>YONEX</td>\n",
       "      <td>YONEX Tokyo 2 Badminton Sho...</td>\n",
       "      <td>shoes</td>\n",
       "      <td>men</td>\n",
       "      <td>1919</td>\n",
       "      <td>2998.44</td>\n",
       "      <td>1079</td>\n",
       "      <td>36.0</td>\n",
       "      <td>4.3</td>\n",
       "      <td>1298</td>\n",
       "      <td>172</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>ADIDAS</td>\n",
       "      <td>ADIDAS Clear Factor M Runni...</td>\n",
       "      <td>shoes</td>\n",
       "      <td>men</td>\n",
       "      <td>1499</td>\n",
       "      <td>2498.33</td>\n",
       "      <td>999</td>\n",
       "      <td>40.0</td>\n",
       "      <td>4.2</td>\n",
       "      <td>3904</td>\n",
       "      <td>578</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>PUMA</td>\n",
       "      <td>PUMA Space Runner Running S...</td>\n",
       "      <td>shoes</td>\n",
       "      <td>men</td>\n",
       "      <td>2050</td>\n",
       "      <td>3474.58</td>\n",
       "      <td>1424</td>\n",
       "      <td>41.0</td>\n",
       "      <td>4.2</td>\n",
       "      <td>194</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ID   Brand                            Title Product Type  Who  Price  \\\n",
       "0   1    NIKE   NIKE Nike Revolution 4 Men'...        shoes  men   2216   \n",
       "1   2  Layasa   Layasa sports shoes for men...        shoes  men    379   \n",
       "2   3   YONEX   YONEX Tokyo 2 Badminton Sho...        shoes  men   1919   \n",
       "3   4  ADIDAS   ADIDAS Clear Factor M Runni...        shoes  men   1499   \n",
       "4   5    PUMA   PUMA Space Runner Running S...        shoes  men   2050   \n",
       "\n",
       "       MRP  Savings  Discount %  Rating  Total Ratings Given  \\\n",
       "0  3693.33     1477        40.0     4.2                54006   \n",
       "1   997.37      618        62.0     4.0                13792   \n",
       "2  2998.44     1079        36.0     4.3                 1298   \n",
       "3  2498.33      999        40.0     4.2                 3904   \n",
       "4  3474.58     1424        41.0     4.2                  194   \n",
       "\n",
       "   Total Reviews Given  \n",
       "0                 7049  \n",
       "1                 1677  \n",
       "2                  172  \n",
       "3                  578  \n",
       "4                   36  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Remove duplicates\n",
    "df = df.drop_duplicates()\n",
    "print(\"After dropping duplicates:\", df.shape)\n",
    "\n",
    "# Keep only products with at least 5 ratings\n",
    "df = df[df['Total Ratings Given'] >= 5]\n",
    "print(\"After filtering by ratings:\", df.shape)\n",
    "\n",
    "# Reset index\n",
    "df = df.reset_index(drop=True)\n",
    "\n",
    "# Add unique Product ID\n",
    "df.insert(0, 'ID', range(1, len(df) + 1))\n",
    "\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "13ac1eb0-e0b0-42b5-9e1e-ad1d7ba0fb7d",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.to_csv('FinalFlipkartData_cleaned_with_ID.csv', index=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d5fd70e3-08b9-4641-8831-5f4d38492c4e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>product_id</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>user_1</td>\n",
       "      <td>210</td>\n",
       "      <td>3.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>user_1</td>\n",
       "      <td>332</td>\n",
       "      <td>3.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>user_1</td>\n",
       "      <td>1117</td>\n",
       "      <td>4.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>user_1</td>\n",
       "      <td>988</td>\n",
       "      <td>3.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>user_1</td>\n",
       "      <td>807</td>\n",
       "      <td>3.3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  user_id  product_id  rating\n",
       "0  user_1         210     3.8\n",
       "1  user_1         332     3.4\n",
       "2  user_1        1117     4.3\n",
       "3  user_1         988     3.8\n",
       "4  user_1         807     3.3"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.random.seed(42)\n",
    "num_users = 30\n",
    "user_ids = [f\"user_{i}\" for i in range(1, num_users + 1)]\n",
    "\n",
    "ratings_data = []\n",
    "for user in user_ids:\n",
    "    rated_products = np.random.choice(df['ID'], size=np.random.randint(10, 25), replace=False)\n",
    "    for product_id in rated_products:\n",
    "        rating = np.round(np.random.uniform(3.0, 5.0), 1)\n",
    "        ratings_data.append([user, product_id, rating])\n",
    "\n",
    "ratings_df = pd.DataFrame(ratings_data, columns=['user_id', 'product_id', 'rating'])\n",
    "ratings_df.to_csv('user_product_ratings.csv', index=False)\n",
    "ratings_df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "df8d1642-65ee-43e5-a40a-1206a183aa0a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Uncomment if not installed:\n",
    "# !pip install scikit-surprise\n",
    "\n",
    "from surprise import Dataset, Reader, SVD\n",
    "from surprise.model_selection import train_test_split\n",
    "from surprise import accuracy\n",
    "import pickle\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "911afca5-f56e-4713-9732-79415d8f2eaa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSE: 0.5728\n",
      "RMSE on test set: 0.5727757233469983\n"
     ]
    }
   ],
   "source": [
    "reader = Reader(rating_scale=(1, 5))\n",
    "data = Dataset.load_from_df(ratings_df[['user_id', 'product_id', 'rating']], reader)\n",
    "trainset, testset = train_test_split(data, test_size=0.2, random_state=42)\n",
    "\n",
    "model = SVD()\n",
    "model.fit(trainset)\n",
    "\n",
    "predictions = model.test(testset)\n",
    "rmse = accuracy.rmse(predictions)\n",
    "print(\"RMSE on test set:\", rmse)\n",
    "\n",
    "# Optionally, save trained model for reuse\n",
    "with open('svd_model.pkl', 'wb') as f:\n",
    "    pickle.dump(model, f)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8ac89cf9-2ddc-42e0-b6c1-c9cd8a6e5b0a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>product_id</th>\n",
       "      <th>predicted_rating</th>\n",
       "      <th>Brand</th>\n",
       "      <th>Title</th>\n",
       "      <th>Product Type</th>\n",
       "      <th>Who</th>\n",
       "      <th>Price</th>\n",
       "      <th>MRP</th>\n",
       "      <th>Savings</th>\n",
       "      <th>Discount %</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Total Ratings Given</th>\n",
       "      <th>Total Reviews Given</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>user_1</td>\n",
       "      <td>1</td>\n",
       "      <td>4.128454</td>\n",
       "      <td>NIKE</td>\n",
       "      <td>NIKE Nike Revolution 4 Men'...</td>\n",
       "      <td>shoes</td>\n",
       "      <td>men</td>\n",
       "      <td>2216</td>\n",
       "      <td>3693.33</td>\n",
       "      <td>1477</td>\n",
       "      <td>40.0</td>\n",
       "      <td>4.2</td>\n",
       "      <td>54006</td>\n",
       "      <td>7049</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>user_1</td>\n",
       "      <td>2</td>\n",
       "      <td>3.833942</td>\n",
       "      <td>Layasa</td>\n",
       "      <td>Layasa sports shoes for men...</td>\n",
       "      <td>shoes</td>\n",
       "      <td>men</td>\n",
       "      <td>379</td>\n",
       "      <td>997.37</td>\n",
       "      <td>618</td>\n",
       "      <td>62.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>13792</td>\n",
       "      <td>1677</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>user_1</td>\n",
       "      <td>3</td>\n",
       "      <td>4.128454</td>\n",
       "      <td>YONEX</td>\n",
       "      <td>YONEX Tokyo 2 Badminton Sho...</td>\n",
       "      <td>shoes</td>\n",
       "      <td>men</td>\n",
       "      <td>1919</td>\n",
       "      <td>2998.44</td>\n",
       "      <td>1079</td>\n",
       "      <td>36.0</td>\n",
       "      <td>4.3</td>\n",
       "      <td>1298</td>\n",
       "      <td>172</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>user_1</td>\n",
       "      <td>4</td>\n",
       "      <td>4.128454</td>\n",
       "      <td>ADIDAS</td>\n",
       "      <td>ADIDAS Clear Factor M Runni...</td>\n",
       "      <td>shoes</td>\n",
       "      <td>men</td>\n",
       "      <td>1499</td>\n",
       "      <td>2498.33</td>\n",
       "      <td>999</td>\n",
       "      <td>40.0</td>\n",
       "      <td>4.2</td>\n",
       "      <td>3904</td>\n",
       "      <td>578</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>user_1</td>\n",
       "      <td>5</td>\n",
       "      <td>4.168631</td>\n",
       "      <td>PUMA</td>\n",
       "      <td>PUMA Space Runner Running S...</td>\n",
       "      <td>shoes</td>\n",
       "      <td>men</td>\n",
       "      <td>2050</td>\n",
       "      <td>3474.58</td>\n",
       "      <td>1424</td>\n",
       "      <td>41.0</td>\n",
       "      <td>4.2</td>\n",
       "      <td>194</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  user_id  product_id  predicted_rating   Brand  \\\n",
       "0  user_1           1          4.128454    NIKE   \n",
       "1  user_1           2          3.833942  Layasa   \n",
       "2  user_1           3          4.128454   YONEX   \n",
       "3  user_1           4          4.128454  ADIDAS   \n",
       "4  user_1           5          4.168631    PUMA   \n",
       "\n",
       "                             Title Product Type  Who  Price      MRP  Savings  \\\n",
       "0   NIKE Nike Revolution 4 Men'...        shoes  men   2216  3693.33     1477   \n",
       "1   Layasa sports shoes for men...        shoes  men    379   997.37      618   \n",
       "2   YONEX Tokyo 2 Badminton Sho...        shoes  men   1919  2998.44     1079   \n",
       "3   ADIDAS Clear Factor M Runni...        shoes  men   1499  2498.33      999   \n",
       "4   PUMA Space Runner Running S...        shoes  men   2050  3474.58     1424   \n",
       "\n",
       "   Discount %  Rating  Total Ratings Given  Total Reviews Given  \n",
       "0        40.0     4.2                54006                 7049  \n",
       "1        62.0     4.0                13792                 1677  \n",
       "2        36.0     4.3                 1298                  172  \n",
       "3        40.0     4.2                 3904                  578  \n",
       "4        41.0     4.2                  194                   36  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_user_ids = ratings_df['user_id'].unique()\n",
    "all_product_ids = df['ID'].unique()\n",
    "\n",
    "results = []\n",
    "for user_id in all_user_ids:\n",
    "    for product_id in all_product_ids:\n",
    "        pred = model.predict(user_id, product_id)\n",
    "        results.append({\n",
    "            'user_id': user_id,\n",
    "            'product_id': product_id,\n",
    "            'predicted_rating': pred.est\n",
    "        })\n",
    "\n",
    "pred_df = pd.DataFrame(results)\n",
    "\n",
    "# Merge predictions with product info\n",
    "product_info = df.rename(columns={'ID': 'product_id'})\n",
    "full_pred = pred_df.merge(product_info, on='product_id', how='left')\n",
    "full_pred.to_csv('ml_predictions_for_streamlit.csv', index=False)\n",
    "full_pred.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "26e1d857-fa4a-42c0-b997-406add554ab4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         Brand                            Title Product Type    Who  Rating\n",
      "67      CAMPUS   CAMPUS JASPER Running Shoes...        shoes    men     4.1\n",
      "136     CAMPUS   CAMPUS Boys & Girls Velcro ...        shoes    kid     4.3\n",
      "252     REEBOK   REEBOK Perforations Women R...       tshirt  women     4.2\n",
      "372     Resist   Resist Rectangular, Wayfare...      glasses  women     3.9\n",
      "535   Ap'pulse   Ap'pulse Solid Women V Neck...        shirt  women     4.2\n",
      "672       PUMA   PUMA Cell Fraction Wn s Run...        shoes  women     3.6\n",
      "790        TSx   TSx Printed Men Grey Track ...        lower    men     3.4\n",
      "926       Alan   Alan Jones Track Pant For B...        lower   kids     4.2\n",
      "1025    Lugano   Lugano 1154 Exclusive Day &...        watch    men     4.1\n",
      "1245      Lucy   Lucy & Luke By Liberty Boys...       sandal    kid     4.1\n"
     ]
    }
   ],
   "source": [
    "sample_user = ratings_df['user_id'].iloc[0]\n",
    "rated_products = set(ratings_df[ratings_df['user_id'] == sample_user]['product_id'])\n",
    "all_product_ids = set(df['ID'])\n",
    "unrated_products = list(all_product_ids - rated_products)\n",
    "\n",
    "predicted_ratings = []\n",
    "for product_id in unrated_products:\n",
    "    pred = model.predict(sample_user, product_id)\n",
    "    predicted_ratings.append((product_id, pred.est))\n",
    "\n",
    "top_n = 10\n",
    "top_recommendations = sorted(predicted_ratings, key=lambda x: x[1], reverse=True)[:top_n]\n",
    "top_product_ids = [pid for pid, _ in top_recommendations]\n",
    "\n",
    "recommended_products = df[df['ID'].isin(top_product_ids)]\n",
    "print(recommended_products[['Brand', 'Title', 'Product Type', 'Who', 'Rating']])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "17c90602-ae87-42f5-90ec-93456f99e8b9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f17c9a20-fb39-4fdd-9557-9f5c73c8859b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * Serving Flask app '__main__'\n",
      " * Debug mode: on\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\n",
      " * Running on http://127.0.0.1:5000\n",
      "Press CTRL+C to quit\n",
      " * Restarting with watchdog (windowsapi)\n"
     ]
    },
    {
     "ename": "SystemExit",
     "evalue": "1",
     "output_type": "error",
     "traceback": [
      "An exception has occurred, use %tb to see the full traceback.\n",
      "\u001b[1;31mSystemExit\u001b[0m\u001b[1;31m:\u001b[0m 1\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\anaconda3\\Lib\\site-packages\\IPython\\core\\interactiveshell.py:3585: UserWarning: To exit: use 'exit', 'quit', or Ctrl-D.\n",
      "  warn(\"To exit: use 'exit', 'quit', or Ctrl-D.\", stacklevel=1)\n"
     ]
    }
   ],
   "source": [
    "from flask import Flask, request, jsonify\n",
    "import pandas as pd\n",
    "\n",
    "app = Flask(__name__)\n",
    "\n",
    "# Load your data ONCE when the server starts\n",
    "df = pd.read_csv('ml_predictions_for_streamlit.csv')\n",
    "df['Who'] = df['Who'].astype(str).str.strip().str.capitalize()\n",
    "df['Brand'] = df['Brand'].astype(str).str.strip()\n",
    "df['Product Type'] = df['Product Type'].astype(str).str.strip()\n",
    "\n",
    "@app.route('/recommend', methods=['GET'])\n",
    "def recommend():\n",
    "    # Get query params\n",
    "    who = request.args.get('who', default=None, type=str)\n",
    "    brand = request.args.get('brand', default=None, type=str)\n",
    "    product_type = request.args.get('product_type', default=None, type=str)\n",
    "    min_rating = request.args.get('min_rating', default=None, type=float)\n",
    "    exact_rating = request.args.get('exact_rating', default=None, type=float)\n",
    "    top_n = request.args.get('top_n', default=10, type=int)\n",
    "\n",
    "    filtered = df.copy()\n",
    "    if who and who.lower() != 'all':\n",
    "        filtered = filtered[filtered['Who'] == who.capitalize()]\n",
    "    if brand and brand.lower() != 'all':\n",
    "        filtered = filtered[filtered['Brand'] == brand]\n",
    "    if product_type and product_type.lower() != 'all':\n",
    "        filtered = filtered[filtered['Product Type'] == product_type]\n",
    "    if min_rating is not None:\n",
    "        filtered = filtered[filtered['Rating'] >= min_rating]\n",
    "    if exact_rating and str(exact_rating).lower() != 'all':\n",
    "        filtered = filtered[filtered['Rating'] == exact_rating]\n",
    "\n",
    "    filtered = filtered.sort_values(['predicted_rating', 'Rating'], ascending=[False, False])\n",
    "\n",
    "    # Select top_n rows and only the needed columns\n",
    "    result = filtered[['Brand', 'Title', 'Product Type', 'Who', 'Rating', 'Total Ratings Given', 'predicted_rating']].head(top_n)\n",
    "    return jsonify(result.to_dict(orient='records'))\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run(debug=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f037e272-54a8-49d2-980a-c744c32aec41",
   "metadata": {},
   "outputs": [],
   "source": [
    "!python app.py\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "52cc7545-e31e-49c2-b201-0618d4dcf500",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
